//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Wed Apr 30 14:38:56 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_setInputs                  O     1 const
// getInstructions                O    13 reg
// RDY_getInstructions            O     1 const
// getV1                          O    32 reg
// RDY_getV1                      O     1 const
// getV2                          O    32 reg
// RDY_getV2                      O     1 const
// getMemWrite                    O    32 reg
// RDY_getMemWrite                O     1 const
// getWrEn                        O     1 reg
// RDY_getWrEn                    O     1 const
// getAddr                        O    32 reg
// RDY_getAddr                    O     1 const
// getJSignal                     O     1 reg
// RDY_getJSignal                 O     1 const
// getJump                        O    32 reg
// RDY_getJump                    O     1 const
// getFinalOutput                 O    32 reg
// RDY_getFinalOutput             O     1 const
// getWrEnRf                      O     1 reg
// RDY_getWrEnRf                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setInputs_rs1_input            I    32
// setInputs_rs2_input            I    32
// setInputs_imm                  I    32
// setInputs_mem_read             I    32
// setInputs_out_signal           I    45
// setInputs_opcode               I     7
// setInputs_pc_input             I    32
// setInputs_aluOutput            I    64
// EN_setInputs                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkControlUnit(CLK,
		     RST_N,

		     setInputs_rs1_input,
		     setInputs_rs2_input,
		     setInputs_imm,
		     setInputs_mem_read,
		     setInputs_out_signal,
		     setInputs_opcode,
		     setInputs_pc_input,
		     setInputs_aluOutput,
		     EN_setInputs,
		     RDY_setInputs,

		     getInstructions,
		     RDY_getInstructions,

		     getV1,
		     RDY_getV1,

		     getV2,
		     RDY_getV2,

		     getMemWrite,
		     RDY_getMemWrite,

		     getWrEn,
		     RDY_getWrEn,

		     getAddr,
		     RDY_getAddr,

		     getJSignal,
		     RDY_getJSignal,

		     getJump,
		     RDY_getJump,

		     getFinalOutput,
		     RDY_getFinalOutput,

		     getWrEnRf,
		     RDY_getWrEnRf);
  input  CLK;
  input  RST_N;

  // action method setInputs
  input  [31 : 0] setInputs_rs1_input;
  input  [31 : 0] setInputs_rs2_input;
  input  [31 : 0] setInputs_imm;
  input  [31 : 0] setInputs_mem_read;
  input  [44 : 0] setInputs_out_signal;
  input  [6 : 0] setInputs_opcode;
  input  [31 : 0] setInputs_pc_input;
  input  [63 : 0] setInputs_aluOutput;
  input  EN_setInputs;
  output RDY_setInputs;

  // value method getInstructions
  output [12 : 0] getInstructions;
  output RDY_getInstructions;

  // value method getV1
  output [31 : 0] getV1;
  output RDY_getV1;

  // value method getV2
  output [31 : 0] getV2;
  output RDY_getV2;

  // value method getMemWrite
  output [31 : 0] getMemWrite;
  output RDY_getMemWrite;

  // value method getWrEn
  output getWrEn;
  output RDY_getWrEn;

  // value method getAddr
  output [31 : 0] getAddr;
  output RDY_getAddr;

  // value method getJSignal
  output getJSignal;
  output RDY_getJSignal;

  // value method getJump
  output [31 : 0] getJump;
  output RDY_getJump;

  // value method getFinalOutput
  output [31 : 0] getFinalOutput;
  output RDY_getFinalOutput;

  // value method getWrEnRf
  output getWrEnRf;
  output RDY_getWrEnRf;

  // signals for module outputs
  wire [31 : 0] getAddr, getFinalOutput, getJump, getMemWrite, getV1, getV2;
  wire [12 : 0] getInstructions;
  wire RDY_getAddr,
       RDY_getFinalOutput,
       RDY_getInstructions,
       RDY_getJSignal,
       RDY_getJump,
       RDY_getMemWrite,
       RDY_getV1,
       RDY_getV2,
       RDY_getWrEn,
       RDY_getWrEnRf,
       RDY_setInputs,
       getJSignal,
       getWrEn,
       getWrEnRf;

  // register r_addr
  reg [31 : 0] r_addr;
  reg [31 : 0] r_addr$D_IN;
  wire r_addr$EN;

  // register r_final_output
  reg [31 : 0] r_final_output;
  reg [31 : 0] r_final_output$D_IN;
  wire r_final_output$EN;

  // register r_instructions
  reg [12 : 0] r_instructions;
  reg [12 : 0] r_instructions$D_IN;
  wire r_instructions$EN;

  // register r_j_signal
  reg r_j_signal;
  wire r_j_signal$D_IN, r_j_signal$EN;

  // register r_jump
  reg [31 : 0] r_jump;
  reg [31 : 0] r_jump$D_IN;
  wire r_jump$EN;

  // register r_mem_count
  reg [1 : 0] r_mem_count;
  reg [1 : 0] r_mem_count$D_IN;
  wire r_mem_count$EN;

  // register r_mem_write
  reg [31 : 0] r_mem_write;
  reg [31 : 0] r_mem_write$D_IN;
  wire r_mem_write$EN;

  // register r_simm
  reg [31 : 0] r_simm;
  wire [31 : 0] r_simm$D_IN;
  wire r_simm$EN;

  // register r_v1
  reg [31 : 0] r_v1;
  reg [31 : 0] r_v1$D_IN;
  wire r_v1$EN;

  // register r_v2
  reg [31 : 0] r_v2;
  reg [31 : 0] r_v2$D_IN;
  wire r_v2$EN;

  // register r_val
  reg [63 : 0] r_val;
  wire [63 : 0] r_val$D_IN;
  wire r_val$EN;

  // register r_wr_en
  reg r_wr_en;
  wire r_wr_en$D_IN, r_wr_en$EN;

  // register r_wr_en_rf
  reg r_wr_en_rf;
  wire r_wr_en_rf$D_IN, r_wr_en_rf$EN;

  // remaining internal signals
  reg [31 : 0] CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q7,
	       CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q8,
	       CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q9,
	       IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146,
	       IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244,
	       IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259,
	       _theResult___fst__h1329,
	       _theResult___snd_fst__h1003,
	       _theResult___snd_snd__h1824,
	       _theResult___snd_snd_fst__h1184,
	       _theResult___snd_snd_snd_fst__h2822,
	       _theResult___snd_snd_snd_snd_fst__h2221;
  reg [12 : 0] _theResult___fst__h639;
  reg CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10,
      IF_setInputs_opcode_EQ_0b1100011_67_THEN_IF_se_ETC___d190;
  wire [31 : 0] _theResult___snd__h1876,
		_theResult___snd__h1888,
		_theResult___snd__h1926,
		_theResult___snd__h1938,
		_theResult___snd_fst__h1097,
		_theResult___snd_snd__h1981,
		_theResult___snd_snd__h1982,
		_theResult___snd_snd_fst__h1238,
		_theResult___snd_snd_fst__h2176,
		_theResult___snd_snd_fst__h2180,
		_theResult___snd_snd_snd__h1189,
		_theResult___snd_snd_snd__h1239,
		_theResult___snd_snd_snd__h2177,
		_theResult___snd_snd_snd__h2181,
		new_final_output___1__h1979,
		new_final_output___1__h2319,
		new_final_output___1__h2694,
		new_final_output___1__h3237,
		new_final_output__h2846,
		new_final_output__h2873,
		new_final_output__h2900,
		new_final_output__h2927,
		new_final_output__h2967,
		new_final_output__h2994,
		new_final_output__h3036,
		new_final_output__h3063,
		new_final_output__h3090,
		new_final_output__h3117,
		new_final_output__h3157,
		new_final_output__h3184,
		new_final_output__h932,
		new_jump___1__h1946,
		new_jump___1__h1964,
		new_mem_write__h1354,
		new_mem_write__h1399,
		new_mem_write__h1465,
		new_mem_write__h1531,
		new_mem_write__h1589,
		new_mem_write__h1634,
		new_v1__h1120,
		new_v2__h1261,
		setInputs_rs1_input_PLUS_setInputs_imm___d126;
  wire [15 : 0] setInputs_mem_read_BITS_15_TO_0__q2,
		setInputs_mem_read_BITS_31_TO_16__q5;
  wire [12 : 0] x__h2149;
  wire [7 : 0] setInputs_mem_read_BITS_15_TO_8__q3,
	       setInputs_mem_read_BITS_23_TO_16__q4,
	       setInputs_mem_read_BITS_31_TO_24__q6,
	       setInputs_mem_read_BITS_7_TO_0__q1;
  wire setInputs_rs1_input_EQ_setInputs_rs2_input___d169,
       setInputs_rs1_input_ULT_setInputs_rs2_input___d173;

  // action method setInputs
  assign RDY_setInputs = 1'd1 ;

  // value method getInstructions
  assign getInstructions = r_instructions ;
  assign RDY_getInstructions = 1'd1 ;

  // value method getV1
  assign getV1 = r_v1 ;
  assign RDY_getV1 = 1'd1 ;

  // value method getV2
  assign getV2 = r_v2 ;
  assign RDY_getV2 = 1'd1 ;

  // value method getMemWrite
  assign getMemWrite = r_mem_write ;
  assign RDY_getMemWrite = 1'd1 ;

  // value method getWrEn
  assign getWrEn = r_wr_en ;
  assign RDY_getWrEn = 1'd1 ;

  // value method getAddr
  assign getAddr = r_addr ;
  assign RDY_getAddr = 1'd1 ;

  // value method getJSignal
  assign getJSignal = r_j_signal ;
  assign RDY_getJSignal = 1'd1 ;

  // value method getJump
  assign getJump = r_jump ;
  assign RDY_getJump = 1'd1 ;

  // value method getFinalOutput
  assign getFinalOutput = r_final_output ;
  assign RDY_getFinalOutput = 1'd1 ;

  // value method getWrEnRf
  assign getWrEnRf = r_wr_en_rf ;
  assign RDY_getWrEnRf = 1'd1 ;

  // register r_addr
  always@(setInputs_opcode or setInputs_rs1_input_PLUS_setInputs_imm___d126)
  begin
    case (setInputs_opcode)
      7'b0000011, 7'b0100011:
	  r_addr$D_IN = setInputs_rs1_input_PLUS_setInputs_imm___d126;
      7'b0010011, 7'b0110011: r_addr$D_IN = 32'd0;
      default: r_addr$D_IN = 32'd0;
    endcase
  end
  assign r_addr$EN = EN_setInputs ;

  // register r_final_output
  always@(setInputs_opcode or
	  _theResult___snd_snd_snd_fst__h2822 or
	  _theResult___snd_snd_snd_snd_fst__h2221 or
	  _theResult___snd_snd__h1982 or
	  _theResult___snd_snd__h1981 or
	  _theResult___snd_snd_snd__h2181 or _theResult___snd_snd_snd__h2177)
  begin
    case (setInputs_opcode)
      7'b0000011: r_final_output$D_IN = _theResult___snd_snd_snd_fst__h2822;
      7'b0010011, 7'b0110011:
	  r_final_output$D_IN = _theResult___snd_snd_snd_snd_fst__h2221;
      7'b0010111: r_final_output$D_IN = _theResult___snd_snd__h1982;
      7'b0100011, 7'b1100011: r_final_output$D_IN = 32'd0;
      7'b0110111: r_final_output$D_IN = _theResult___snd_snd__h1981;
      7'b1100111: r_final_output$D_IN = _theResult___snd_snd_snd__h2181;
      7'b1101111: r_final_output$D_IN = _theResult___snd_snd_snd__h2177;
      default: r_final_output$D_IN = 32'd0;
    endcase
  end
  assign r_final_output$EN = EN_setInputs ;

  // register r_instructions
  always@(setInputs_opcode or _theResult___fst__h639)
  begin
    case (setInputs_opcode)
      7'b0010011, 7'b0110011: r_instructions$D_IN = _theResult___fst__h639;
      default: r_instructions$D_IN = 13'd0;
    endcase
  end
  assign r_instructions$EN = EN_setInputs ;

  // register r_j_signal
  assign r_j_signal$D_IN =
	     setInputs_opcode != 7'b0110011 &&
	     setInputs_opcode != 7'b0010011 &&
	     setInputs_opcode != 7'b0000011 &&
	     setInputs_opcode != 7'b0100011 &&
	     IF_setInputs_opcode_EQ_0b1100011_67_THEN_IF_se_ETC___d190 ;
  assign r_j_signal$EN = EN_setInputs ;

  // register r_jump
  always@(setInputs_opcode or
	  _theResult___snd_snd__h1824 or
	  _theResult___snd_snd_fst__h2180 or _theResult___snd_snd_fst__h2176)
  begin
    case (setInputs_opcode)
      7'b0000011, 7'b0010011, 7'b0100011, 7'b0110011: r_jump$D_IN = 32'd0;
      7'b1100011: r_jump$D_IN = _theResult___snd_snd__h1824;
      7'b1100111: r_jump$D_IN = _theResult___snd_snd_fst__h2180;
      7'b1101111: r_jump$D_IN = _theResult___snd_snd_fst__h2176;
      default: r_jump$D_IN = 32'd0;
    endcase
  end
  assign r_jump$EN = EN_setInputs ;

  // register r_mem_count
  always@(setInputs_opcode or setInputs_rs1_input_PLUS_setInputs_imm___d126)
  begin
    case (setInputs_opcode)
      7'b0000011, 7'b0100011:
	  r_mem_count$D_IN =
	      setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0];
      7'b0010011, 7'b0110011: r_mem_count$D_IN = 2'd0;
      default: r_mem_count$D_IN = 2'd0;
    endcase
  end
  assign r_mem_count$EN = EN_setInputs ;

  // register r_mem_write
  always@(setInputs_opcode or _theResult___fst__h1329)
  begin
    case (setInputs_opcode)
      7'b0000011, 7'b0010011, 7'b0110011: r_mem_write$D_IN = 32'd0;
      7'b0100011: r_mem_write$D_IN = _theResult___fst__h1329;
      default: r_mem_write$D_IN = 32'd0;
    endcase
  end
  assign r_mem_write$EN = EN_setInputs ;

  // register r_simm
  assign r_simm$D_IN = 32'h0 ;
  assign r_simm$EN = 1'b0 ;

  // register r_v1
  always@(setInputs_opcode or _theResult___snd_fst__h1003)
  begin
    case (setInputs_opcode)
      7'b0010011, 7'b0110011: r_v1$D_IN = _theResult___snd_fst__h1003;
      default: r_v1$D_IN = 32'd0;
    endcase
  end
  assign r_v1$EN = EN_setInputs ;

  // register r_v2
  always@(setInputs_opcode or _theResult___snd_snd_fst__h1184)
  begin
    case (setInputs_opcode)
      7'b0010011, 7'b0110011: r_v2$D_IN = _theResult___snd_snd_fst__h1184;
      default: r_v2$D_IN = 32'd0;
    endcase
  end
  assign r_v2$EN = EN_setInputs ;

  // register r_val
  assign r_val$D_IN = 64'h0 ;
  assign r_val$EN = 1'b0 ;

  // register r_wr_en
  assign r_wr_en$D_IN = setInputs_opcode == 7'b0100011 ;
  assign r_wr_en$EN = EN_setInputs ;

  // register r_wr_en_rf
  assign r_wr_en_rf$D_IN =
	     setInputs_opcode == 7'b0110011 ||
	     setInputs_opcode == 7'b0010011 ;
  assign r_wr_en_rf$EN = EN_setInputs ;

  // remaining internal signals
  assign _theResult___snd__h1876 =
	     setInputs_rs1_input_EQ_setInputs_rs2_input___d169 ?
	       new_jump___1__h1946 :
	       32'd0 ;
  assign _theResult___snd__h1888 =
	     setInputs_rs1_input_EQ_setInputs_rs2_input___d169 ?
	       32'd0 :
	       new_jump___1__h1946 ;
  assign _theResult___snd__h1926 =
	     setInputs_rs1_input_ULT_setInputs_rs2_input___d173 ?
	       new_jump___1__h1946 :
	       32'd0 ;
  assign _theResult___snd__h1938 =
	     setInputs_rs1_input_ULT_setInputs_rs2_input___d173 ?
	       32'd0 :
	       new_jump___1__h1946 ;
  assign _theResult___snd_fst__h1097 =
	     setInputs_rs1_input[31] ? new_v1__h1120 : setInputs_rs1_input ;
  assign _theResult___snd_snd__h1981 =
	     (setInputs_out_signal == 45'h000800000000) ?
	       { setInputs_imm[31:12], 12'b0 } :
	       32'd0 ;
  assign _theResult___snd_snd__h1982 =
	     (setInputs_out_signal == 45'h001000000000) ?
	       new_final_output___1__h3237 :
	       32'd0 ;
  assign _theResult___snd_snd_fst__h1238 =
	     setInputs_rs2_input[31] ? new_v2__h1261 : setInputs_rs2_input ;
  assign _theResult___snd_snd_fst__h2176 =
	     (setInputs_out_signal == 45'h000200000000) ?
	       new_jump___1__h1964 :
	       32'd0 ;
  assign _theResult___snd_snd_fst__h2180 =
	     (setInputs_out_signal == 45'h000400000000) ?
	       setInputs_rs1_input_PLUS_setInputs_imm___d126 :
	       32'd0 ;
  assign _theResult___snd_snd_snd__h1189 =
	     (setInputs_rs1_input[31] || setInputs_rs2_input[31]) ?
	       new_final_output___1__h2319 :
	       32'd0 ;
  assign _theResult___snd_snd_snd__h1239 =
	     (setInputs_rs1_input[31] || setInputs_rs2_input[31]) ?
	       new_final_output___1__h2694 :
	       32'd0 ;
  assign _theResult___snd_snd_snd__h2177 =
	     (setInputs_out_signal == 45'h000200000000) ?
	       new_final_output___1__h1979 :
	       32'd0 ;
  assign _theResult___snd_snd_snd__h2181 =
	     (setInputs_out_signal == 45'h000400000000) ?
	       new_final_output___1__h1979 :
	       32'd0 ;
  assign new_final_output___1__h1979 = setInputs_pc_input + 32'd4 ;
  assign new_final_output___1__h2319 = { 1'b1, setInputs_aluOutput[62:32] } ;
  assign new_final_output___1__h2694 = { 1'b1, setInputs_aluOutput[30:0] } ;
  assign new_final_output___1__h3237 =
	     setInputs_pc_input + { setInputs_imm[31:12], 12'b0 } ;
  assign new_final_output__h2846 =
	     { {24{setInputs_mem_read_BITS_7_TO_0__q1[7]}},
	       setInputs_mem_read_BITS_7_TO_0__q1 } ;
  assign new_final_output__h2873 =
	     { {24{setInputs_mem_read_BITS_15_TO_8__q3[7]}},
	       setInputs_mem_read_BITS_15_TO_8__q3 } ;
  assign new_final_output__h2900 =
	     { {24{setInputs_mem_read_BITS_23_TO_16__q4[7]}},
	       setInputs_mem_read_BITS_23_TO_16__q4 } ;
  assign new_final_output__h2927 =
	     { {24{setInputs_mem_read_BITS_31_TO_24__q6[7]}},
	       setInputs_mem_read_BITS_31_TO_24__q6 } ;
  assign new_final_output__h2967 =
	     { {16{setInputs_mem_read_BITS_15_TO_0__q2[15]}},
	       setInputs_mem_read_BITS_15_TO_0__q2 } ;
  assign new_final_output__h2994 =
	     { {16{setInputs_mem_read_BITS_31_TO_16__q5[15]}},
	       setInputs_mem_read_BITS_31_TO_16__q5 } ;
  assign new_final_output__h3036 = { 24'd0, setInputs_mem_read[7:0] } ;
  assign new_final_output__h3063 = { 24'd0, setInputs_mem_read[15:8] } ;
  assign new_final_output__h3090 = { 24'd0, setInputs_mem_read[23:16] } ;
  assign new_final_output__h3117 = { 24'd0, setInputs_mem_read[31:24] } ;
  assign new_final_output__h3157 = { 16'd0, setInputs_mem_read[15:0] } ;
  assign new_final_output__h3184 = { 16'd0, setInputs_mem_read[31:16] } ;
  assign new_final_output__h932 =
	     { setInputs_rs1_input[31], setInputs_aluOutput[62:32] } ;
  assign new_jump___1__h1946 =
	     setInputs_pc_input + { {19{x__h2149[12]}}, x__h2149 } ;
  assign new_jump___1__h1964 = setInputs_pc_input + setInputs_imm ;
  assign new_mem_write__h1354 =
	     { setInputs_mem_read[31:8], setInputs_rs2_input[7:0] } ;
  assign new_mem_write__h1399 =
	     { setInputs_mem_read[31:16],
	       setInputs_rs2_input[7:0],
	       setInputs_mem_read[7:0] } ;
  assign new_mem_write__h1465 =
	     { setInputs_mem_read[31:24],
	       setInputs_rs2_input[7:0],
	       setInputs_mem_read[15:0] } ;
  assign new_mem_write__h1531 =
	     { setInputs_rs2_input[7:0], setInputs_mem_read[23:0] } ;
  assign new_mem_write__h1589 =
	     { setInputs_mem_read[31:16], setInputs_rs2_input[15:0] } ;
  assign new_mem_write__h1634 =
	     { setInputs_rs2_input[15:0], setInputs_mem_read[15:0] } ;
  assign new_v1__h1120 = ~setInputs_rs1_input + 32'd1 ;
  assign new_v2__h1261 = ~setInputs_rs2_input + 32'd1 ;
  assign setInputs_mem_read_BITS_15_TO_0__q2 = setInputs_mem_read[15:0] ;
  assign setInputs_mem_read_BITS_15_TO_8__q3 = setInputs_mem_read[15:8] ;
  assign setInputs_mem_read_BITS_23_TO_16__q4 = setInputs_mem_read[23:16] ;
  assign setInputs_mem_read_BITS_31_TO_16__q5 = setInputs_mem_read[31:16] ;
  assign setInputs_mem_read_BITS_31_TO_24__q6 = setInputs_mem_read[31:24] ;
  assign setInputs_mem_read_BITS_7_TO_0__q1 = setInputs_mem_read[7:0] ;
  assign setInputs_rs1_input_EQ_setInputs_rs2_input___d169 =
	     setInputs_rs1_input == setInputs_rs2_input ;
  assign setInputs_rs1_input_PLUS_setInputs_imm___d126 =
	     setInputs_rs1_input + setInputs_imm ;
  assign setInputs_rs1_input_ULT_setInputs_rs2_input___d173 =
	     setInputs_rs1_input < setInputs_rs2_input ;
  assign x__h2149 = { setInputs_imm[12:1], 1'b0 } ;
  always@(setInputs_out_signal)
  begin
    case (setInputs_out_signal)
      45'h000000000001, 45'h000000000400: _theResult___fst__h639 = 13'd1;
      45'h000000000002: _theResult___fst__h639 = 13'd2;
      45'h000000000004, 45'h000000010000: _theResult___fst__h639 = 13'd4;
      45'h000000000008, 45'h000000000800: _theResult___fst__h639 = 13'd8;
      45'h000000000010, 45'h000000001000: _theResult___fst__h639 = 13'd16;
      45'h000000000020, 45'h000000002000: _theResult___fst__h639 = 13'd32;
      45'h000000000040, 45'h000000020000: _theResult___fst__h639 = 13'd64;
      45'h000000000080, 45'h000000040000: _theResult___fst__h639 = 13'd128;
      45'h000000000100, 45'h000000004000: _theResult___fst__h639 = 13'd256;
      45'h000000000200, 45'h000000008000: _theResult___fst__h639 = 13'd512;
      45'h002000000000, 45'h004000000000, 45'h008000000000, 45'h010000000000:
	  _theResult___fst__h639 = 13'd1024;
      45'h020000000000, 45'h040000000000: _theResult___fst__h639 = 13'd2048;
      45'h080000000000, 45'h100000000000: _theResult___fst__h639 = 13'd4096;
      default: _theResult___fst__h639 = 13'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  setInputs_aluOutput or
	  _theResult___snd_snd_snd__h1189 or
	  new_final_output__h932 or _theResult___snd_snd_snd__h1239)
  begin
    case (setInputs_out_signal)
      45'h000000000001,
      45'h000000000002,
      45'h000000000004,
      45'h000000000008,
      45'h000000000010,
      45'h000000000020,
      45'h000000000040,
      45'h000000000080,
      45'h000000000100,
      45'h000000000200,
      45'h000000000400,
      45'h000000000800,
      45'h000000001000,
      45'h000000002000,
      45'h000000004000,
      45'h000000008000,
      45'h000000010000,
      45'h000000020000,
      45'h000000040000,
      45'h002000000000,
      45'h040000000000,
      45'h100000000000:
	  _theResult___snd_snd_snd_snd_fst__h2221 = setInputs_aluOutput[31:0];
      45'h004000000000:
	  _theResult___snd_snd_snd_snd_fst__h2221 =
	      _theResult___snd_snd_snd__h1189;
      45'h008000000000:
	  _theResult___snd_snd_snd_snd_fst__h2221 = new_final_output__h932;
      45'h010000000000:
	  _theResult___snd_snd_snd_snd_fst__h2221 =
	      setInputs_aluOutput[63:32];
      45'h020000000000, 45'h080000000000:
	  _theResult___snd_snd_snd_snd_fst__h2221 =
	      _theResult___snd_snd_snd__h1239;
      default: _theResult___snd_snd_snd_snd_fst__h2221 = 32'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  setInputs_rs1_input or _theResult___snd_fst__h1097 or new_v1__h1120)
  begin
    case (setInputs_out_signal)
      45'h000000000001,
      45'h000000000002,
      45'h000000000004,
      45'h000000000008,
      45'h000000000010,
      45'h000000000020,
      45'h000000000040,
      45'h000000000080,
      45'h000000000100,
      45'h000000000200,
      45'h000000000400,
      45'h000000000800,
      45'h000000001000,
      45'h000000002000,
      45'h000000004000,
      45'h000000008000,
      45'h000000010000,
      45'h000000020000,
      45'h000000040000,
      45'h002000000000,
      45'h010000000000,
      45'h040000000000,
      45'h100000000000:
	  _theResult___snd_fst__h1003 = setInputs_rs1_input;
      45'h004000000000, 45'h020000000000, 45'h080000000000:
	  _theResult___snd_fst__h1003 = _theResult___snd_fst__h1097;
      45'h008000000000: _theResult___snd_fst__h1003 = new_v1__h1120;
      default: _theResult___snd_fst__h1003 = 32'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  setInputs_rs2_input or
	  setInputs_imm or _theResult___snd_snd_fst__h1238)
  begin
    case (setInputs_out_signal)
      45'h000000000001,
      45'h000000000002,
      45'h000000000004,
      45'h000000000008,
      45'h000000000010,
      45'h000000000020,
      45'h000000000040,
      45'h000000000080,
      45'h000000000100,
      45'h000000000200,
      45'h002000000000,
      45'h008000000000,
      45'h010000000000,
      45'h040000000000,
      45'h100000000000:
	  _theResult___snd_snd_fst__h1184 = setInputs_rs2_input;
      45'h000000000400,
      45'h000000000800,
      45'h000000001000,
      45'h000000002000,
      45'h000000004000,
      45'h000000008000,
      45'h000000010000,
      45'h000000020000,
      45'h000000040000:
	  _theResult___snd_snd_fst__h1184 = setInputs_imm;
      45'h004000000000, 45'h020000000000, 45'h080000000000:
	  _theResult___snd_snd_fst__h1184 = _theResult___snd_snd_fst__h1238;
      default: _theResult___snd_snd_fst__h1184 = 32'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  _theResult___snd__h1876 or
	  _theResult___snd__h1888 or
	  _theResult___snd__h1926 or _theResult___snd__h1938)
  begin
    case (setInputs_out_signal)
      45'h000008000000: _theResult___snd_snd__h1824 = _theResult___snd__h1876;
      45'h000010000000: _theResult___snd_snd__h1824 = _theResult___snd__h1888;
      45'h000020000000, 45'h000080000000:
	  _theResult___snd_snd__h1824 = _theResult___snd__h1926;
      45'h000040000000, 45'h000100000000:
	  _theResult___snd_snd__h1824 = _theResult___snd__h1938;
      default: _theResult___snd_snd__h1824 = 32'd0;
    endcase
  end
  always@(setInputs_rs1_input_PLUS_setInputs_imm___d126 or
	  new_final_output__h2846 or
	  new_final_output__h2873 or
	  new_final_output__h2900 or new_final_output__h2927)
  begin
    case (setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0])
      2'b0:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244 =
	      new_final_output__h2846;
      2'b01:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244 =
	      new_final_output__h2873;
      2'b10:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244 =
	      new_final_output__h2900;
      2'b11:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244 =
	      new_final_output__h2927;
    endcase
  end
  always@(setInputs_rs1_input_PLUS_setInputs_imm___d126 or
	  new_final_output__h3036 or
	  new_final_output__h3063 or
	  new_final_output__h3090 or new_final_output__h3117)
  begin
    case (setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0])
      2'b0:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259 =
	      new_final_output__h3036;
      2'b01:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259 =
	      new_final_output__h3063;
      2'b10:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259 =
	      new_final_output__h3090;
      2'b11:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259 =
	      new_final_output__h3117;
    endcase
  end
  always@(setInputs_rs1_input_PLUS_setInputs_imm___d126 or
	  new_final_output__h2967 or new_final_output__h2994)
  begin
    case (setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0])
      2'b0:
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q7 =
	      new_final_output__h2967;
      2'b10:
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q7 =
	      new_final_output__h2994;
      default: CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q7 = 32'd0;
    endcase
  end
  always@(setInputs_rs1_input_PLUS_setInputs_imm___d126 or
	  new_final_output__h3157 or new_final_output__h3184)
  begin
    case (setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0])
      2'b0:
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q8 =
	      new_final_output__h3157;
      2'b10:
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q8 =
	      new_final_output__h3184;
      default: CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q8 = 32'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244 or
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q7 or
	  setInputs_mem_read or
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259 or
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q8)
  begin
    case (setInputs_out_signal)
      45'h000000080000:
	  _theResult___snd_snd_snd_fst__h2822 =
	      IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d244;
      45'h000000100000:
	  _theResult___snd_snd_snd_fst__h2822 =
	      CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q7;
      45'h000000200000:
	  _theResult___snd_snd_snd_fst__h2822 = setInputs_mem_read;
      45'h000000400000:
	  _theResult___snd_snd_snd_fst__h2822 =
	      IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d259;
      45'h000000800000:
	  _theResult___snd_snd_snd_fst__h2822 =
	      CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q8;
      default: _theResult___snd_snd_snd_fst__h2822 = 32'd0;
    endcase
  end
  always@(setInputs_rs1_input_PLUS_setInputs_imm___d126 or
	  new_mem_write__h1354 or
	  new_mem_write__h1399 or
	  new_mem_write__h1465 or new_mem_write__h1531)
  begin
    case (setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0])
      2'b0:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146 =
	      new_mem_write__h1354;
      2'b01:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146 =
	      new_mem_write__h1399;
      2'b10:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146 =
	      new_mem_write__h1465;
      2'b11:
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146 =
	      new_mem_write__h1531;
    endcase
  end
  always@(setInputs_rs1_input_PLUS_setInputs_imm___d126 or
	  new_mem_write__h1589 or new_mem_write__h1634)
  begin
    case (setInputs_rs1_input_PLUS_setInputs_imm___d126[1:0])
      2'b0:
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q9 =
	      new_mem_write__h1589;
      2'b10:
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q9 =
	      new_mem_write__h1634;
      default: CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q9 = 32'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146 or
	  CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q9 or
	  setInputs_rs2_input)
  begin
    case (setInputs_out_signal)
      45'h000001000000:
	  _theResult___fst__h1329 =
	      IF_setInputs_rs1_input_PLUS_setInputs_imm_26_B_ETC___d146;
      45'h000002000000:
	  _theResult___fst__h1329 =
	      CASE_setInputs_rs1_input_PLUS_setInputs_imm_26_ETC__q9;
      45'h000004000000: _theResult___fst__h1329 = setInputs_rs2_input;
      default: _theResult___fst__h1329 = 32'd0;
    endcase
  end
  always@(setInputs_out_signal or
	  setInputs_rs1_input_ULT_setInputs_rs2_input___d173 or
	  setInputs_rs1_input_EQ_setInputs_rs2_input___d169)
  begin
    case (setInputs_out_signal)
      45'h000008000000:
	  CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10 =
	      setInputs_rs1_input_EQ_setInputs_rs2_input___d169;
      45'h000010000000:
	  CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10 =
	      !setInputs_rs1_input_EQ_setInputs_rs2_input___d169;
      45'h000020000000, 45'h000080000000:
	  CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10 =
	      setInputs_rs1_input_ULT_setInputs_rs2_input___d173;
      45'h000040000000:
	  CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10 =
	      !setInputs_rs1_input_ULT_setInputs_rs2_input___d173;
      default: CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10 =
		   setInputs_out_signal == 45'h000100000000 &&
		   !setInputs_rs1_input_ULT_setInputs_rs2_input___d173;
    endcase
  end
  always@(setInputs_opcode or
	  setInputs_out_signal or
	  CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10)
  begin
    case (setInputs_opcode)
      7'b1100011:
	  IF_setInputs_opcode_EQ_0b1100011_67_THEN_IF_se_ETC___d190 =
	      CASE_setInputs_out_signal_0x8000000_setInputs__ETC__q10;
      7'b1101111:
	  IF_setInputs_opcode_EQ_0b1100011_67_THEN_IF_se_ETC___d190 =
	      setInputs_out_signal == 45'h000200000000;
      default: IF_setInputs_opcode_EQ_0b1100011_67_THEN_IF_se_ETC___d190 =
		   setInputs_opcode == 7'b1100111 &&
		   setInputs_out_signal == 45'h000400000000;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        r_addr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_final_output <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_instructions <= `BSV_ASSIGNMENT_DELAY 13'd0;
	r_j_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
	r_jump <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_mem_count <= `BSV_ASSIGNMENT_DELAY 2'd0;
	r_mem_write <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_simm <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_v1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_v2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_val <= `BSV_ASSIGNMENT_DELAY 64'd0;
	r_wr_en <= `BSV_ASSIGNMENT_DELAY 1'd0;
	r_wr_en_rf <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (r_addr$EN) r_addr <= `BSV_ASSIGNMENT_DELAY r_addr$D_IN;
	if (r_final_output$EN)
	  r_final_output <= `BSV_ASSIGNMENT_DELAY r_final_output$D_IN;
	if (r_instructions$EN)
	  r_instructions <= `BSV_ASSIGNMENT_DELAY r_instructions$D_IN;
	if (r_j_signal$EN)
	  r_j_signal <= `BSV_ASSIGNMENT_DELAY r_j_signal$D_IN;
	if (r_jump$EN) r_jump <= `BSV_ASSIGNMENT_DELAY r_jump$D_IN;
	if (r_mem_count$EN)
	  r_mem_count <= `BSV_ASSIGNMENT_DELAY r_mem_count$D_IN;
	if (r_mem_write$EN)
	  r_mem_write <= `BSV_ASSIGNMENT_DELAY r_mem_write$D_IN;
	if (r_simm$EN) r_simm <= `BSV_ASSIGNMENT_DELAY r_simm$D_IN;
	if (r_v1$EN) r_v1 <= `BSV_ASSIGNMENT_DELAY r_v1$D_IN;
	if (r_v2$EN) r_v2 <= `BSV_ASSIGNMENT_DELAY r_v2$D_IN;
	if (r_val$EN) r_val <= `BSV_ASSIGNMENT_DELAY r_val$D_IN;
	if (r_wr_en$EN) r_wr_en <= `BSV_ASSIGNMENT_DELAY r_wr_en$D_IN;
	if (r_wr_en_rf$EN)
	  r_wr_en_rf <= `BSV_ASSIGNMENT_DELAY r_wr_en_rf$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    r_addr = 32'hAAAAAAAA;
    r_final_output = 32'hAAAAAAAA;
    r_instructions = 13'h0AAA;
    r_j_signal = 1'h0;
    r_jump = 32'hAAAAAAAA;
    r_mem_count = 2'h2;
    r_mem_write = 32'hAAAAAAAA;
    r_simm = 32'hAAAAAAAA;
    r_v1 = 32'hAAAAAAAA;
    r_v2 = 32'hAAAAAAAA;
    r_val = 64'hAAAAAAAAAAAAAAAA;
    r_wr_en = 1'h0;
    r_wr_en_rf = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkControlUnit

