//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Tue Apr 29 21:13:35 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// decode                         O   101
// RDY_decode                     O     1 const
// RST_N                          I     1 unused
// decode_instr                   I    32
//
// Combinational paths from inputs to outputs:
//   decode_instr -> decode
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDecoder(RST_N,

		 decode_instr,
		 decode,
		 RDY_decode);
  input  RST_N;

  // value method decode
  input  [31 : 0] decode_instr;
  output [100 : 0] decode;
  output RDY_decode;

  // signals for module outputs
  wire [100 : 0] decode;
  wire RDY_decode;

  // remaining internal signals
  reg [31 : 0] imm__h43;
  reg [4 : 0] x__h172, x__h18, x__h5864;
  wire [44 : 0] sig__h89;
  wire [31 : 0] imm_b__h40, imm_i__h38, imm_j__h42, imm_s__h39, imm_u__h41;
  wire [20 : 0] sx21__h35;
  wire [19 : 0] sx20__h36;
  wire [11 : 0] sx12__h37;

  // value method decode
  assign decode =
	     { x__h18,
	       x__h172,
	       imm__h43,
	       x__h5864,
	       decode_instr[6:0] == 7'b0110011 ||
	       decode_instr[6:0] == 7'b0100111 ||
	       decode_instr[6:0] == 7'b1010011 ||
	       decode_instr[6:0] == 7'b0000011 ||
	       decode_instr[6:0] == 7'b0010011 ||
	       decode_instr[6:0] == 7'b1100111 ||
	       decode_instr[6:0] == 7'b0100011 ||
	       decode_instr[6:0] == 7'b1100011 ||
	       decode_instr[6:0] == 7'b0101111,
	       decode_instr[6:0] == 7'b0110011 ||
	       decode_instr[6:0] == 7'b0100111 ||
	       decode_instr[6:0] == 7'b1010011 ||
	       decode_instr[6:0] == 7'b0100011 ||
	       decode_instr[6:0] == 7'b1100011 ||
	       decode_instr[6:0] == 7'b0101111,
	       decode_instr[6:0],
	       sig__h89 } ;
  assign RDY_decode = 1'd1 ;

  // remaining internal signals
  assign imm_b__h40 =
	     { sx20__h36,
	       decode_instr[7],
	       decode_instr[30:25],
	       decode_instr[11:8],
	       1'b0 } ;
  assign imm_i__h38 = { sx20__h36, decode_instr[31:20] } ;
  assign imm_j__h42 =
	     { sx12__h37,
	       decode_instr[19:12],
	       decode_instr[20],
	       decode_instr[30:21],
	       1'b0 } ;
  assign imm_s__h39 = { sx21__h35, decode_instr[30:25], decode_instr[11:7] } ;
  assign imm_u__h41 = { decode_instr[31:12], 12'b0 } ;
  assign sig__h89 =
	     { decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h7,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h6,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h5,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h3,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0010111,
	       decode_instr[6:0] == 7'b0110111,
	       decode_instr[6:0] == 7'b1100111 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b1101111,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h7,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h6,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h5,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0100011 && decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0100011 && decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b0100011 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h5,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h3,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0010011 &&
	       decode_instr[14:12] == 3'h5 &&
	       imm__h43[11:5] == 7'h20,
	       decode_instr[6:0] == 7'b0010011 &&
	       decode_instr[14:12] == 3'h5 &&
	       imm__h43[11:5] == 7'h0,
	       decode_instr[6:0] == 7'b0010011 &&
	       decode_instr[14:12] == 3'h1 &&
	       imm__h43[11:5] == 7'h0,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h7,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h6,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h0,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h3,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h2,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h5 &&
	       decode_instr[31:25] == 7'h20,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h5 &&
	       decode_instr[31:25] == 7'h0,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h1,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h7,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h6,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h4,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h0 &&
	       decode_instr[31:25] == 7'h20,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h0 &&
	       decode_instr[31:25] == 7'h0 } ;
  assign sx12__h37 = {12{decode_instr[31]}} ;
  assign sx20__h36 =
	     { sx12__h37,
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31] } ;
  assign sx21__h35 = { sx20__h36, decode_instr[31] } ;
  always@(decode_instr)
  begin
    case (decode_instr[6:0])
      7'b0000011,
      7'b0010011,
      7'b0100011,
      7'b0100111,
      7'b0101111,
      7'b0110011,
      7'b1010011,
      7'b1100011,
      7'b1100111:
	  x__h172 = decode_instr[19:15];
      default: x__h172 = 5'd0;
    endcase
  end
  always@(decode_instr)
  begin
    case (decode_instr[6:0])
      7'b0000011,
      7'b0010011,
      7'b0010111,
      7'b0100111,
      7'b0101111,
      7'b0110011,
      7'b0110111,
      7'b1010011,
      7'b1100111,
      7'b1101111:
	  x__h5864 = decode_instr[11:7];
      default: x__h5864 = 5'd0;
    endcase
  end
  always@(decode_instr)
  begin
    case (decode_instr[6:0])
      7'b0100011, 7'b0100111, 7'b0101111, 7'b0110011, 7'b1010011, 7'b1100011:
	  x__h18 = decode_instr[24:20];
      default: x__h18 = 5'd0;
    endcase
  end
  always@(decode_instr or
	  imm_i__h38 or imm_u__h41 or imm_s__h39 or imm_b__h40 or imm_j__h42)
  begin
    case (decode_instr[6:0])
      7'b0000011, 7'b0010011, 7'b1100111: imm__h43 = imm_i__h38;
      7'b0010111, 7'b0110111: imm__h43 = imm_u__h41;
      7'b0100011: imm__h43 = imm_s__h39;
      7'b1100011: imm__h43 = imm_b__h40;
      7'b1101111: imm__h43 = imm_j__h42;
      default: imm__h43 = 32'h0;
    endcase
  end
endmodule  // mkDecoder

