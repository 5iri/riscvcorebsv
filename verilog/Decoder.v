//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Tue Apr 29 21:44:37 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// rs2                            O     5 reg
// rs1                            O     5 reg
// imm                            O    32 reg
// rd                             O     5 reg
// rs1_valid                      O     1 reg
// rs2_valid                      O     1 reg
// opcode                         O     7 reg
// out_signal                     O    45 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// decode_instr                   I    32
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDecoder(CLK,
		 RST_N,

		 decode_instr,

		 rs2,

		 rs1,

		 imm,

		 rd,

		 rs1_valid,

		 rs2_valid,

		 opcode,

		 out_signal);
  input  CLK;
  input  RST_N;

  // action method decode
  input  [31 : 0] decode_instr;

  // value method rs2
  output [4 : 0] rs2;

  // value method rs1
  output [4 : 0] rs1;

  // value method imm
  output [31 : 0] imm;

  // value method rd
  output [4 : 0] rd;

  // value method rs1_valid
  output rs1_valid;

  // value method rs2_valid
  output rs2_valid;

  // value method opcode
  output [6 : 0] opcode;

  // value method out_signal
  output [44 : 0] out_signal;

  // signals for module outputs
  wire [44 : 0] out_signal;
  wire [31 : 0] imm;
  wire [6 : 0] opcode;
  wire [4 : 0] rd, rs1, rs2;
  wire rs1_valid, rs2_valid;

  // register r_imm
  reg [31 : 0] r_imm;
  wire [31 : 0] r_imm$D_IN;
  wire r_imm$EN;

  // register r_opcode
  reg [6 : 0] r_opcode;
  wire [6 : 0] r_opcode$D_IN;
  wire r_opcode$EN;

  // register r_rd
  reg [4 : 0] r_rd;
  reg [4 : 0] r_rd$D_IN;
  wire r_rd$EN;

  // register r_rs1
  reg [4 : 0] r_rs1;
  reg [4 : 0] r_rs1$D_IN;
  wire r_rs1$EN;

  // register r_rs1_valid
  reg r_rs1_valid;
  wire r_rs1_valid$D_IN, r_rs1_valid$EN;

  // register r_rs2
  reg [4 : 0] r_rs2;
  reg [4 : 0] r_rs2$D_IN;
  wire r_rs2$EN;

  // register r_rs2_valid
  reg r_rs2_valid;
  wire r_rs2_valid$D_IN, r_rs2_valid$EN;

  // register r_sig
  reg [44 : 0] r_sig;
  wire [44 : 0] r_sig$D_IN;
  wire r_sig$EN;

  // remaining internal signals
  reg [31 : 0] imm_v__h333;
  wire [31 : 0] imm_b__h330,
		imm_i__h328,
		imm_j__h332,
		imm_s__h329,
		imm_u__h331;

  // value method rs2
  assign rs2 = r_rs2 ;

  // value method rs1
  assign rs1 = r_rs1 ;

  // value method imm
  assign imm = r_imm ;

  // value method rd
  assign rd = r_rd ;

  // value method rs1_valid
  assign rs1_valid = r_rs1_valid ;

  // value method rs2_valid
  assign rs2_valid = r_rs2_valid ;

  // value method opcode
  assign opcode = r_opcode ;

  // value method out_signal
  assign out_signal = r_sig ;

  // register r_imm
  assign r_imm$D_IN = imm_v__h333 ;
  assign r_imm$EN = 1'd1 ;

  // register r_opcode
  assign r_opcode$D_IN = decode_instr[6:0] ;
  assign r_opcode$EN = 1'd1 ;

  // register r_rd
  always@(decode_instr)
  begin
    case (decode_instr[6:0])
      7'b0000011,
      7'b0010011,
      7'b0010111,
      7'b0100111,
      7'b0101111,
      7'b0110011,
      7'b0110111,
      7'b1010011,
      7'b1100111,
      7'b1101111:
	  r_rd$D_IN = decode_instr[11:7];
      default: r_rd$D_IN = 5'd0;
    endcase
  end
  assign r_rd$EN = 1'd1 ;

  // register r_rs1
  always@(decode_instr)
  begin
    case (decode_instr[6:0])
      7'b0000011,
      7'b0010011,
      7'b0100011,
      7'b0100111,
      7'b0101111,
      7'b0110011,
      7'b1010011,
      7'b1100011,
      7'b1100111:
	  r_rs1$D_IN = decode_instr[19:15];
      default: r_rs1$D_IN = 5'd0;
    endcase
  end
  assign r_rs1$EN = 1'd1 ;

  // register r_rs1_valid
  assign r_rs1_valid$D_IN =
	     decode_instr[6:0] == 7'b0110011 ||
	     decode_instr[6:0] == 7'b0100111 ||
	     decode_instr[6:0] == 7'b1010011 ||
	     decode_instr[6:0] == 7'b0000011 ||
	     decode_instr[6:0] == 7'b0010011 ||
	     decode_instr[6:0] == 7'b1100111 ||
	     decode_instr[6:0] == 7'b0100011 ||
	     decode_instr[6:0] == 7'b1100011 ||
	     decode_instr[6:0] == 7'b0101111 ;
  assign r_rs1_valid$EN = 1'd1 ;

  // register r_rs2
  always@(decode_instr)
  begin
    case (decode_instr[6:0])
      7'b0100011, 7'b0100111, 7'b0101111, 7'b0110011, 7'b1010011, 7'b1100011:
	  r_rs2$D_IN = decode_instr[24:20];
      default: r_rs2$D_IN = 5'd0;
    endcase
  end
  assign r_rs2$EN = 1'd1 ;

  // register r_rs2_valid
  assign r_rs2_valid$D_IN =
	     decode_instr[6:0] == 7'b0110011 ||
	     decode_instr[6:0] == 7'b0100111 ||
	     decode_instr[6:0] == 7'b1010011 ||
	     decode_instr[6:0] == 7'b0100011 ||
	     decode_instr[6:0] == 7'b1100011 ||
	     decode_instr[6:0] == 7'b0101111 ;
  assign r_rs2_valid$EN = 1'd1 ;

  // register r_sig
  assign r_sig$D_IN =
	     { decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h7,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h6,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h5,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h3,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b0110011 &&
	       decode_instr[31:25] == 7'b0000001 &&
	       decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0010111,
	       decode_instr[6:0] == 7'b0110111,
	       decode_instr[6:0] == 7'b1100111 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b1101111,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h7,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h6,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h5,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b1100011 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0100011 && decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0100011 && decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b0100011 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h5,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h1,
	       decode_instr[6:0] == 7'b0000011 && decode_instr[14:12] == 3'h0,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h3,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h2,
	       decode_instr[6:0] == 7'b0010011 &&
	       decode_instr[14:12] == 3'h5 &&
	       imm_v__h333[11:5] == 7'h20,
	       decode_instr[6:0] == 7'b0010011 &&
	       decode_instr[14:12] == 3'h5 &&
	       imm_v__h333[11:5] == 7'h0,
	       decode_instr[6:0] == 7'b0010011 &&
	       decode_instr[14:12] == 3'h1 &&
	       imm_v__h333[11:5] == 7'h0,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h7,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h6,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h4,
	       decode_instr[6:0] == 7'b0010011 && decode_instr[14:12] == 3'h0,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h3,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h2,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h5 &&
	       decode_instr[31:25] == 7'h20,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h5 &&
	       decode_instr[31:25] == 7'h0,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h1,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h7,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h6,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h4,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h0 &&
	       decode_instr[31:25] == 7'h20,
	       (decode_instr[6:0] == 7'b0110011 ||
		decode_instr[6:0] == 7'b0100111 ||
		decode_instr[6:0] == 7'b1010011) &&
	       decode_instr[14:12] == 3'h0 &&
	       decode_instr[31:25] == 7'h0 } ;
  assign r_sig$EN = 1'd1 ;

  // remaining internal signals
  assign imm_b__h330 =
	     { decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[7],
	       decode_instr[30:25],
	       decode_instr[11:8],
	       1'b0 } ;
  assign imm_i__h328 =
	     { decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31:20] } ;
  assign imm_j__h332 =
	     { decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[19:12],
	       decode_instr[20],
	       decode_instr[30:21],
	       1'b0 } ;
  assign imm_s__h329 =
	     { decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31],
	       decode_instr[31:25],
	       decode_instr[11:7] } ;
  assign imm_u__h331 = { decode_instr[31:12], 12'b0 } ;
  always@(decode_instr or
	  imm_i__h328 or
	  imm_u__h331 or imm_s__h329 or imm_b__h330 or imm_j__h332)
  begin
    case (decode_instr[6:0])
      7'b0000011, 7'b0010011, 7'b1100111: imm_v__h333 = imm_i__h328;
      7'b0010111, 7'b0110111: imm_v__h333 = imm_u__h331;
      7'b0100011: imm_v__h333 = imm_s__h329;
      7'b1100011: imm_v__h333 = imm_b__h330;
      7'b1101111: imm_v__h333 = imm_j__h332;
      default: imm_v__h333 = 32'h0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        r_imm <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r_opcode <= `BSV_ASSIGNMENT_DELAY 7'd0;
	r_rd <= `BSV_ASSIGNMENT_DELAY 5'd0;
	r_rs1 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	r_rs1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	r_rs2 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	r_rs2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	r_sig <= `BSV_ASSIGNMENT_DELAY 45'd0;
      end
    else
      begin
        if (r_imm$EN) r_imm <= `BSV_ASSIGNMENT_DELAY r_imm$D_IN;
	if (r_opcode$EN) r_opcode <= `BSV_ASSIGNMENT_DELAY r_opcode$D_IN;
	if (r_rd$EN) r_rd <= `BSV_ASSIGNMENT_DELAY r_rd$D_IN;
	if (r_rs1$EN) r_rs1 <= `BSV_ASSIGNMENT_DELAY r_rs1$D_IN;
	if (r_rs1_valid$EN)
	  r_rs1_valid <= `BSV_ASSIGNMENT_DELAY r_rs1_valid$D_IN;
	if (r_rs2$EN) r_rs2 <= `BSV_ASSIGNMENT_DELAY r_rs2$D_IN;
	if (r_rs2_valid$EN)
	  r_rs2_valid <= `BSV_ASSIGNMENT_DELAY r_rs2_valid$D_IN;
	if (r_sig$EN) r_sig <= `BSV_ASSIGNMENT_DELAY r_sig$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    r_imm = 32'hAAAAAAAA;
    r_opcode = 7'h2A;
    r_rd = 5'h0A;
    r_rs1 = 5'h0A;
    r_rs1_valid = 1'h0;
    r_rs2 = 5'h0A;
    r_rs2_valid = 1'h0;
    r_sig = 45'h0AAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDecoder

