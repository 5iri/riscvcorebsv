//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Mon Apr 14 03:23:11 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// rs1                            O    32
// RDY_rs1                        O     1 const
// rs2                            O    32
// RDY_rs2                        O     1 const
// RDY_write                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rs1_addr                       I     5
// rs2_addr                       I     5
// write_addr                     I     5
// write_data                     I    32 reg
// EN_write                       I     1
//
// Combinational paths from inputs to outputs:
//   rs1_addr -> rs1
//   rs2_addr -> rs2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRegisterFile(CLK,
		      RST_N,

		      rs1_addr,
		      rs1,
		      RDY_rs1,

		      rs2_addr,
		      rs2,
		      RDY_rs2,

		      write_addr,
		      write_data,
		      EN_write,
		      RDY_write);
  input  CLK;
  input  RST_N;

  // value method rs1
  input  [4 : 0] rs1_addr;
  output [31 : 0] rs1;
  output RDY_rs1;

  // value method rs2
  input  [4 : 0] rs2_addr;
  output [31 : 0] rs2;
  output RDY_rs2;

  // action method write
  input  [4 : 0] write_addr;
  input  [31 : 0] write_data;
  input  EN_write;
  output RDY_write;

  // signals for module outputs
  reg [31 : 0] rs1, rs2;
  wire RDY_rs1, RDY_rs2, RDY_write;

  // register x1
  reg [31 : 0] x1;
  wire [31 : 0] x1$D_IN;
  wire x1$EN;

  // register x10
  reg [31 : 0] x10;
  wire [31 : 0] x10$D_IN;
  wire x10$EN;

  // register x11
  reg [31 : 0] x11;
  wire [31 : 0] x11$D_IN;
  wire x11$EN;

  // register x12
  reg [31 : 0] x12;
  wire [31 : 0] x12$D_IN;
  wire x12$EN;

  // register x13
  reg [31 : 0] x13;
  wire [31 : 0] x13$D_IN;
  wire x13$EN;

  // register x14
  reg [31 : 0] x14;
  wire [31 : 0] x14$D_IN;
  wire x14$EN;

  // register x15
  reg [31 : 0] x15;
  wire [31 : 0] x15$D_IN;
  wire x15$EN;

  // register x16
  reg [31 : 0] x16;
  wire [31 : 0] x16$D_IN;
  wire x16$EN;

  // register x17
  reg [31 : 0] x17;
  wire [31 : 0] x17$D_IN;
  wire x17$EN;

  // register x18
  reg [31 : 0] x18;
  wire [31 : 0] x18$D_IN;
  wire x18$EN;

  // register x19
  reg [31 : 0] x19;
  wire [31 : 0] x19$D_IN;
  wire x19$EN;

  // register x2
  reg [31 : 0] x2;
  wire [31 : 0] x2$D_IN;
  wire x2$EN;

  // register x20
  reg [31 : 0] x20;
  wire [31 : 0] x20$D_IN;
  wire x20$EN;

  // register x21
  reg [31 : 0] x21;
  wire [31 : 0] x21$D_IN;
  wire x21$EN;

  // register x22
  reg [31 : 0] x22;
  wire [31 : 0] x22$D_IN;
  wire x22$EN;

  // register x23
  reg [31 : 0] x23;
  wire [31 : 0] x23$D_IN;
  wire x23$EN;

  // register x24
  reg [31 : 0] x24;
  wire [31 : 0] x24$D_IN;
  wire x24$EN;

  // register x25
  reg [31 : 0] x25;
  wire [31 : 0] x25$D_IN;
  wire x25$EN;

  // register x26
  reg [31 : 0] x26;
  wire [31 : 0] x26$D_IN;
  wire x26$EN;

  // register x27
  reg [31 : 0] x27;
  wire [31 : 0] x27$D_IN;
  wire x27$EN;

  // register x28
  reg [31 : 0] x28;
  wire [31 : 0] x28$D_IN;
  wire x28$EN;

  // register x29
  reg [31 : 0] x29;
  wire [31 : 0] x29$D_IN;
  wire x29$EN;

  // register x3
  reg [31 : 0] x3;
  wire [31 : 0] x3$D_IN;
  wire x3$EN;

  // register x30
  reg [31 : 0] x30;
  wire [31 : 0] x30$D_IN;
  wire x30$EN;

  // register x31
  reg [31 : 0] x31;
  wire [31 : 0] x31$D_IN;
  wire x31$EN;

  // register x4
  reg [31 : 0] x4;
  wire [31 : 0] x4$D_IN;
  wire x4$EN;

  // register x5
  reg [31 : 0] x5;
  wire [31 : 0] x5$D_IN;
  wire x5$EN;

  // register x6
  reg [31 : 0] x6;
  wire [31 : 0] x6$D_IN;
  wire x6$EN;

  // register x7
  reg [31 : 0] x7;
  wire [31 : 0] x7$D_IN;
  wire x7$EN;

  // register x8
  reg [31 : 0] x8;
  wire [31 : 0] x8$D_IN;
  wire x8$EN;

  // register x9
  reg [31 : 0] x9;
  wire [31 : 0] x9$D_IN;
  wire x9$EN;

  // value method rs1
  always@(rs1_addr or
	  x1 or
	  x2 or
	  x3 or
	  x4 or
	  x5 or
	  x6 or
	  x7 or
	  x8 or
	  x9 or
	  x10 or
	  x11 or
	  x12 or
	  x13 or
	  x14 or
	  x15 or
	  x16 or
	  x17 or
	  x18 or
	  x19 or
	  x20 or
	  x21 or
	  x22 or x23 or x24 or x25 or x26 or x27 or x28 or x29 or x30 or x31)
  begin
    case (rs1_addr)
      5'b0: rs1 = 32'd0;
      5'b00001: rs1 = x1;
      5'b00010: rs1 = x2;
      5'b00011: rs1 = x3;
      5'b00100: rs1 = x4;
      5'b00101: rs1 = x5;
      5'b00110: rs1 = x6;
      5'b00111: rs1 = x7;
      5'b01000: rs1 = x8;
      5'b01001: rs1 = x9;
      5'b01010: rs1 = x10;
      5'b01011: rs1 = x11;
      5'b01100: rs1 = x12;
      5'b01101: rs1 = x13;
      5'b01110: rs1 = x14;
      5'b01111: rs1 = x15;
      5'b10000: rs1 = x16;
      5'b10001: rs1 = x17;
      5'b10010: rs1 = x18;
      5'b10011: rs1 = x19;
      5'b10100: rs1 = x20;
      5'b10101: rs1 = x21;
      5'b10110: rs1 = x22;
      5'b10111: rs1 = x23;
      5'b11000: rs1 = x24;
      5'b11001: rs1 = x25;
      5'b11010: rs1 = x26;
      5'b11011: rs1 = x27;
      5'b11100: rs1 = x28;
      5'b11101: rs1 = x29;
      5'b11110: rs1 = x30;
      5'b11111: rs1 = x31;
    endcase
  end
  assign RDY_rs1 = 1'd1 ;

  // value method rs2
  always@(rs2_addr or
	  x1 or
	  x2 or
	  x3 or
	  x4 or
	  x5 or
	  x6 or
	  x7 or
	  x8 or
	  x9 or
	  x10 or
	  x11 or
	  x12 or
	  x13 or
	  x14 or
	  x15 or
	  x16 or
	  x17 or
	  x18 or
	  x19 or
	  x20 or
	  x21 or
	  x22 or x23 or x24 or x25 or x26 or x27 or x28 or x29 or x30 or x31)
  begin
    case (rs2_addr)
      5'b0: rs2 = 32'd0;
      5'b00001: rs2 = x1;
      5'b00010: rs2 = x2;
      5'b00011: rs2 = x3;
      5'b00100: rs2 = x4;
      5'b00101: rs2 = x5;
      5'b00110: rs2 = x6;
      5'b00111: rs2 = x7;
      5'b01000: rs2 = x8;
      5'b01001: rs2 = x9;
      5'b01010: rs2 = x10;
      5'b01011: rs2 = x11;
      5'b01100: rs2 = x12;
      5'b01101: rs2 = x13;
      5'b01110: rs2 = x14;
      5'b01111: rs2 = x15;
      5'b10000: rs2 = x16;
      5'b10001: rs2 = x17;
      5'b10010: rs2 = x18;
      5'b10011: rs2 = x19;
      5'b10100: rs2 = x20;
      5'b10101: rs2 = x21;
      5'b10110: rs2 = x22;
      5'b10111: rs2 = x23;
      5'b11000: rs2 = x24;
      5'b11001: rs2 = x25;
      5'b11010: rs2 = x26;
      5'b11011: rs2 = x27;
      5'b11100: rs2 = x28;
      5'b11101: rs2 = x29;
      5'b11110: rs2 = x30;
      5'b11111: rs2 = x31;
    endcase
  end
  assign RDY_rs2 = 1'd1 ;

  // action method write
  assign RDY_write = 1'd1 ;

  // register x1
  assign x1$D_IN = write_data ;
  assign x1$EN = EN_write && write_addr == 5'b00001 ;

  // register x10
  assign x10$D_IN = write_data ;
  assign x10$EN = EN_write && write_addr == 5'b01010 ;

  // register x11
  assign x11$D_IN = write_data ;
  assign x11$EN = EN_write && write_addr == 5'b01011 ;

  // register x12
  assign x12$D_IN = write_data ;
  assign x12$EN = EN_write && write_addr == 5'b01100 ;

  // register x13
  assign x13$D_IN = write_data ;
  assign x13$EN = EN_write && write_addr == 5'b01101 ;

  // register x14
  assign x14$D_IN = write_data ;
  assign x14$EN = EN_write && write_addr == 5'b01110 ;

  // register x15
  assign x15$D_IN = write_data ;
  assign x15$EN = EN_write && write_addr == 5'b01111 ;

  // register x16
  assign x16$D_IN = write_data ;
  assign x16$EN = EN_write && write_addr == 5'b10000 ;

  // register x17
  assign x17$D_IN = write_data ;
  assign x17$EN = EN_write && write_addr == 5'b10001 ;

  // register x18
  assign x18$D_IN = write_data ;
  assign x18$EN = EN_write && write_addr == 5'b10010 ;

  // register x19
  assign x19$D_IN = write_data ;
  assign x19$EN = EN_write && write_addr == 5'b10011 ;

  // register x2
  assign x2$D_IN = write_data ;
  assign x2$EN = EN_write && write_addr == 5'b00010 ;

  // register x20
  assign x20$D_IN = write_data ;
  assign x20$EN = EN_write && write_addr == 5'b10100 ;

  // register x21
  assign x21$D_IN = write_data ;
  assign x21$EN = EN_write && write_addr == 5'b10101 ;

  // register x22
  assign x22$D_IN = write_data ;
  assign x22$EN = EN_write && write_addr == 5'b10110 ;

  // register x23
  assign x23$D_IN = write_data ;
  assign x23$EN = EN_write && write_addr == 5'b10111 ;

  // register x24
  assign x24$D_IN = write_data ;
  assign x24$EN = EN_write && write_addr == 5'b11000 ;

  // register x25
  assign x25$D_IN = write_data ;
  assign x25$EN = EN_write && write_addr == 5'b11001 ;

  // register x26
  assign x26$D_IN = write_data ;
  assign x26$EN = EN_write && write_addr == 5'b11010 ;

  // register x27
  assign x27$D_IN = write_data ;
  assign x27$EN = EN_write && write_addr == 5'b11011 ;

  // register x28
  assign x28$D_IN = write_data ;
  assign x28$EN = EN_write && write_addr == 5'b11100 ;

  // register x29
  assign x29$D_IN = write_data ;
  assign x29$EN = EN_write && write_addr == 5'b11101 ;

  // register x3
  assign x3$D_IN = write_data ;
  assign x3$EN = EN_write && write_addr == 5'b00011 ;

  // register x30
  assign x30$D_IN = write_data ;
  assign x30$EN = EN_write && write_addr == 5'b11110 ;

  // register x31
  assign x31$D_IN = write_data ;
  assign x31$EN = EN_write && write_addr == 5'b11111 ;

  // register x4
  assign x4$D_IN = write_data ;
  assign x4$EN = EN_write && write_addr == 5'b00100 ;

  // register x5
  assign x5$D_IN = write_data ;
  assign x5$EN = EN_write && write_addr == 5'b00101 ;

  // register x6
  assign x6$D_IN = write_data ;
  assign x6$EN = EN_write && write_addr == 5'b00110 ;

  // register x7
  assign x7$D_IN = write_data ;
  assign x7$EN = EN_write && write_addr == 5'b00111 ;

  // register x8
  assign x8$D_IN = write_data ;
  assign x8$EN = EN_write && write_addr == 5'b01000 ;

  // register x9
  assign x9$D_IN = write_data ;
  assign x9$EN = EN_write && write_addr == 5'b01001 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        x1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (x1$EN) x1 <= `BSV_ASSIGNMENT_DELAY x1$D_IN;
	if (x10$EN) x10 <= `BSV_ASSIGNMENT_DELAY x10$D_IN;
	if (x11$EN) x11 <= `BSV_ASSIGNMENT_DELAY x11$D_IN;
	if (x12$EN) x12 <= `BSV_ASSIGNMENT_DELAY x12$D_IN;
	if (x13$EN) x13 <= `BSV_ASSIGNMENT_DELAY x13$D_IN;
	if (x14$EN) x14 <= `BSV_ASSIGNMENT_DELAY x14$D_IN;
	if (x15$EN) x15 <= `BSV_ASSIGNMENT_DELAY x15$D_IN;
	if (x16$EN) x16 <= `BSV_ASSIGNMENT_DELAY x16$D_IN;
	if (x17$EN) x17 <= `BSV_ASSIGNMENT_DELAY x17$D_IN;
	if (x18$EN) x18 <= `BSV_ASSIGNMENT_DELAY x18$D_IN;
	if (x19$EN) x19 <= `BSV_ASSIGNMENT_DELAY x19$D_IN;
	if (x2$EN) x2 <= `BSV_ASSIGNMENT_DELAY x2$D_IN;
	if (x20$EN) x20 <= `BSV_ASSIGNMENT_DELAY x20$D_IN;
	if (x21$EN) x21 <= `BSV_ASSIGNMENT_DELAY x21$D_IN;
	if (x22$EN) x22 <= `BSV_ASSIGNMENT_DELAY x22$D_IN;
	if (x23$EN) x23 <= `BSV_ASSIGNMENT_DELAY x23$D_IN;
	if (x24$EN) x24 <= `BSV_ASSIGNMENT_DELAY x24$D_IN;
	if (x25$EN) x25 <= `BSV_ASSIGNMENT_DELAY x25$D_IN;
	if (x26$EN) x26 <= `BSV_ASSIGNMENT_DELAY x26$D_IN;
	if (x27$EN) x27 <= `BSV_ASSIGNMENT_DELAY x27$D_IN;
	if (x28$EN) x28 <= `BSV_ASSIGNMENT_DELAY x28$D_IN;
	if (x29$EN) x29 <= `BSV_ASSIGNMENT_DELAY x29$D_IN;
	if (x3$EN) x3 <= `BSV_ASSIGNMENT_DELAY x3$D_IN;
	if (x30$EN) x30 <= `BSV_ASSIGNMENT_DELAY x30$D_IN;
	if (x31$EN) x31 <= `BSV_ASSIGNMENT_DELAY x31$D_IN;
	if (x4$EN) x4 <= `BSV_ASSIGNMENT_DELAY x4$D_IN;
	if (x5$EN) x5 <= `BSV_ASSIGNMENT_DELAY x5$D_IN;
	if (x6$EN) x6 <= `BSV_ASSIGNMENT_DELAY x6$D_IN;
	if (x7$EN) x7 <= `BSV_ASSIGNMENT_DELAY x7$D_IN;
	if (x8$EN) x8 <= `BSV_ASSIGNMENT_DELAY x8$D_IN;
	if (x9$EN) x9 <= `BSV_ASSIGNMENT_DELAY x9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    x1 = 32'hAAAAAAAA;
    x10 = 32'hAAAAAAAA;
    x11 = 32'hAAAAAAAA;
    x12 = 32'hAAAAAAAA;
    x13 = 32'hAAAAAAAA;
    x14 = 32'hAAAAAAAA;
    x15 = 32'hAAAAAAAA;
    x16 = 32'hAAAAAAAA;
    x17 = 32'hAAAAAAAA;
    x18 = 32'hAAAAAAAA;
    x19 = 32'hAAAAAAAA;
    x2 = 32'hAAAAAAAA;
    x20 = 32'hAAAAAAAA;
    x21 = 32'hAAAAAAAA;
    x22 = 32'hAAAAAAAA;
    x23 = 32'hAAAAAAAA;
    x24 = 32'hAAAAAAAA;
    x25 = 32'hAAAAAAAA;
    x26 = 32'hAAAAAAAA;
    x27 = 32'hAAAAAAAA;
    x28 = 32'hAAAAAAAA;
    x29 = 32'hAAAAAAAA;
    x3 = 32'hAAAAAAAA;
    x30 = 32'hAAAAAAAA;
    x31 = 32'hAAAAAAAA;
    x4 = 32'hAAAAAAAA;
    x5 = 32'hAAAAAAAA;
    x6 = 32'hAAAAAAAA;
    x7 = 32'hAAAAAAAA;
    x8 = 32'hAAAAAAAA;
    x9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRegisterFile

