//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Wed Apr 30 14:34:44 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_setJumpSignal              O     1 const
// RDY_setJumpAddr                O     1 const
// out_sign                       O    32 reg
// RDY_out_sign                   O     1 const
// CLK_clk                        I     1 clock
// RST_N_rst                      I     1 reset
// CLK                            I     1 unused
// RST_N                          I     1 unused
// setJumpSignal_s                I     1 reg
// setJumpAddr_a                  I    32 reg
// EN_setJumpSignal               I     1
// EN_setJumpAddr                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPC(CLK_clk,
	    RST_N_rst,
	    CLK,
	    RST_N,

	    setJumpSignal_s,
	    EN_setJumpSignal,
	    RDY_setJumpSignal,

	    setJumpAddr_a,
	    EN_setJumpAddr,
	    RDY_setJumpAddr,

	    out_sign,
	    RDY_out_sign);
  input  CLK_clk;
  input  RST_N_rst;
  input  CLK;
  input  RST_N;

  // action method setJumpSignal
  input  setJumpSignal_s;
  input  EN_setJumpSignal;
  output RDY_setJumpSignal;

  // action method setJumpAddr
  input  [31 : 0] setJumpAddr_a;
  input  EN_setJumpAddr;
  output RDY_setJumpAddr;

  // value method out_sign
  output [31 : 0] out_sign;
  output RDY_out_sign;

  // signals for module outputs
  wire [31 : 0] out_sign;
  wire RDY_out_sign, RDY_setJumpAddr, RDY_setJumpSignal;

  // register j_signal_reg
  reg j_signal_reg;
  wire j_signal_reg$D_IN, j_signal_reg$EN;

  // register jump_reg
  reg [31 : 0] jump_reg;
  wire [31 : 0] jump_reg$D_IN;
  wire jump_reg$EN;

  // register next_pc
  reg [31 : 0] next_pc;
  wire [31 : 0] next_pc$D_IN;
  wire next_pc$EN;

  // remaining internal signals
  wire [31 : 0] x__h160;

  // action method setJumpSignal
  assign RDY_setJumpSignal = 1'd1 ;

  // action method setJumpAddr
  assign RDY_setJumpAddr = 1'd1 ;

  // value method out_sign
  assign out_sign = next_pc ;
  assign RDY_out_sign = 1'd1 ;

  // register j_signal_reg
  assign j_signal_reg$D_IN = setJumpSignal_s ;
  assign j_signal_reg$EN = EN_setJumpSignal ;

  // register jump_reg
  assign jump_reg$D_IN = setJumpAddr_a ;
  assign jump_reg$EN = EN_setJumpAddr ;

  // register next_pc
  assign next_pc$D_IN = j_signal_reg ? jump_reg : x__h160 ;
  assign next_pc$EN = 1'd1 ;

  // remaining internal signals
  assign x__h160 = next_pc + 32'd4 ;

  // handling of inlined registers

  always@(posedge CLK_clk)
  begin
    if (RST_N_rst == `BSV_RESET_VALUE)
      begin
        j_signal_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	jump_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	next_pc <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (j_signal_reg$EN)
	  j_signal_reg <= `BSV_ASSIGNMENT_DELAY j_signal_reg$D_IN;
	if (jump_reg$EN) jump_reg <= `BSV_ASSIGNMENT_DELAY jump_reg$D_IN;
	if (next_pc$EN) next_pc <= `BSV_ASSIGNMENT_DELAY next_pc$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    j_signal_reg = 1'h0;
    jump_reg = 32'hAAAAAAAA;
    next_pc = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPC

