//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Wed Apr 30 14:38:56 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// exec                           O    64
// RDY_exec                       O     1 const
// exec_in1                       I    32
// exec_in2                       I    32
// exec_instr                     I    13
//
// Combinational paths from inputs to outputs:
//   (exec_in1, exec_in2, exec_instr) -> exec
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAlu(exec_in1,
	     exec_in2,
	     exec_instr,
	     exec,
	     RDY_exec);
  // value method exec
  input  [31 : 0] exec_in1;
  input  [31 : 0] exec_in2;
  input  [12 : 0] exec_instr;
  output [63 : 0] exec;
  output RDY_exec;

  // signals for module outputs
  reg [63 : 0] exec;
  wire RDY_exec;

  // remaining internal signals
  wire [127 : 0] _0_CONCAT_exec_in1_2_MUL_0_CONCAT_exec_in2_3___d34;
  wire [63 : 0] aluOutput__h135,
		aluOutput__h184,
		aluOutput__h244,
		aluOutput__h268,
		aluOutput__h276,
		aluOutput__h30,
		aluOutput__h40,
		aluOutput__h48,
		aluOutput__h56,
		aluOutput__h64,
		aluOutput__h72;
  wire [31 : 0] x__h138,
		x__h187,
		x__h271,
		x__h279,
		x__h33,
		x__h43,
		x__h51,
		x__h59,
		x__h67,
		x__h75;
  wire x__h247;

  // value method exec
  always@(exec_instr or
	  aluOutput__h30 or
	  aluOutput__h40 or
	  aluOutput__h48 or
	  aluOutput__h56 or
	  aluOutput__h64 or
	  aluOutput__h72 or
	  aluOutput__h135 or
	  aluOutput__h184 or
	  aluOutput__h244 or
	  _0_CONCAT_exec_in1_2_MUL_0_CONCAT_exec_in2_3___d34 or
	  aluOutput__h268 or aluOutput__h276)
  begin
    case (exec_instr)
      13'd1: exec = aluOutput__h30;
      13'd2: exec = aluOutput__h40;
      13'd4: exec = aluOutput__h48;
      13'd8: exec = aluOutput__h56;
      13'd16: exec = aluOutput__h64;
      13'd32: exec = aluOutput__h72;
      13'd64: exec = aluOutput__h135;
      13'd128: exec = aluOutput__h184;
      13'd256, 13'd512: exec = aluOutput__h244;
      13'd1024:
	  exec = _0_CONCAT_exec_in1_2_MUL_0_CONCAT_exec_in2_3___d34[63:0];
      13'd2048: exec = aluOutput__h268;
      13'd4096: exec = aluOutput__h276;
      default: exec = 64'd0;
    endcase
  end
  assign RDY_exec = 1'd1 ;

  // remaining internal signals
  assign _0_CONCAT_exec_in1_2_MUL_0_CONCAT_exec_in2_3___d34 =
	     { 32'd0, exec_in1 } * { 32'd0, exec_in2 } ;
  assign aluOutput__h135 = { 32'd0, x__h138 } ;
  assign aluOutput__h184 = { 32'd0, x__h187 } ;
  assign aluOutput__h244 = { 63'd0, x__h247 } ;
  assign aluOutput__h268 = { 32'd0, x__h271 } ;
  assign aluOutput__h276 = { 32'd0, x__h279 } ;
  assign aluOutput__h30 = { 32'd0, x__h33 } ;
  assign aluOutput__h40 = { 32'd0, x__h43 } ;
  assign aluOutput__h48 = { 32'd0, x__h51 } ;
  assign aluOutput__h56 = { 32'd0, x__h59 } ;
  assign aluOutput__h64 = { 32'd0, x__h67 } ;
  assign aluOutput__h72 = { 32'd0, x__h75 } ;
  assign x__h138 = exec_in1 >> exec_in2[4:0] ;
  assign x__h187 =
	     exec_in1 >> exec_in2[4:0] |
	     ~(32'hFFFFFFFF >> exec_in2[4:0]) & {32{exec_in1[31]}} ;
  assign x__h247 = exec_in1 < exec_in2 ;
  assign x__h271 = exec_in1 / exec_in2 ;
  assign x__h279 = exec_in1 % exec_in2 ;
  assign x__h33 = exec_in1 + exec_in2 ;
  assign x__h43 = exec_in1 - exec_in2 ;
  assign x__h51 = exec_in1 ^ exec_in2 ;
  assign x__h59 = exec_in1 | exec_in2 ;
  assign x__h67 = exec_in1 & exec_in2 ;
  assign x__h75 = exec_in1 << exec_in2[4:0] ;
endmodule  // mkAlu

