//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Tue Mar 25 21:42:51 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_set                        O     1 const
// get                            O    32 reg
// RDY_get                        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_in1                        I    32
// set_in2                        I    32
// set_instr                      I     2
// EN_set                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkALU(CLK,
	     RST_N,

	     set_in1,
	     set_in2,
	     set_instr,
	     EN_set,
	     RDY_set,

	     get,
	     RDY_get);
  input  CLK;
  input  RST_N;

  // action method set
  input  [31 : 0] set_in1;
  input  [31 : 0] set_in2;
  input  [1 : 0] set_instr;
  input  EN_set;
  output RDY_set;

  // value method get
  output [31 : 0] get;
  output RDY_get;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_get, RDY_set;

  // register q
  reg [31 : 0] q;
  wire [31 : 0] q$D_IN;
  wire q$EN;

  // remaining internal signals
  wire [31 : 0] x__h84, x__h91;

  // action method set
  assign RDY_set = 1'd1 ;

  // value method get
  assign get = q ;
  assign RDY_get = 1'd1 ;

  // register q
  assign q$D_IN = (set_instr == 2'd0) ? x__h84 : x__h91 ;
  assign q$EN = EN_set && (set_instr == 2'd0 || set_instr == 2'd1) ;

  // remaining internal signals
  assign x__h84 = set_in1 + set_in2 ;
  assign x__h91 = set_in1 - set_in2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        q <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (q$EN) q <= `BSV_ASSIGNMENT_DELAY q$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    q = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkALU

