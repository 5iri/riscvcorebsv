//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
//
// On Mon Apr  7 18:49:04 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_recieve                    O     1 reg
// get                            O     8 reg
// RDY_get                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// recieve_rx                     I     1 reg
// EN_recieve                     I     1
// EN_get                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkuart_rx(CLK,
		 RST_N,

		 recieve_rx,
		 EN_recieve,
		 RDY_recieve,

		 EN_get,
		 get,
		 RDY_get);
  input  CLK;
  input  RST_N;

  // action method recieve
  input  recieve_rx;
  input  EN_recieve;
  output RDY_recieve;

  // actionvalue method get
  input  EN_get;
  output [7 : 0] get;
  output RDY_get;

  // signals for module outputs
  wire [7 : 0] get;
  wire RDY_get, RDY_recieve;

  // register bitCount
  reg [3 : 0] bitCount;
  wire [3 : 0] bitCount$D_IN;
  wire bitCount$EN;

  // register shiftReg
  reg [7 : 0] shiftReg;
  wire [7 : 0] shiftReg$D_IN;
  wire shiftReg$EN;

  // ports of submodule dataFifo
  wire [7 : 0] dataFifo$D_IN, dataFifo$D_OUT;
  wire dataFifo$CLR,
       dataFifo$DEQ,
       dataFifo$EMPTY_N,
       dataFifo$ENQ,
       dataFifo$FULL_N;

  // action method recieve
  assign RDY_recieve = dataFifo$FULL_N ;

  // actionvalue method get
  assign get = dataFifo$D_OUT ;
  assign RDY_get = dataFifo$EMPTY_N ;

  // submodule dataFifo
  FIFO2 #(.width(32'd8), .guarded(1'd1)) dataFifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(dataFifo$D_IN),
						  .ENQ(dataFifo$ENQ),
						  .DEQ(dataFifo$DEQ),
						  .CLR(dataFifo$CLR),
						  .D_OUT(dataFifo$D_OUT),
						  .FULL_N(dataFifo$FULL_N),
						  .EMPTY_N(dataFifo$EMPTY_N));

  // register bitCount
  assign bitCount$D_IN = (bitCount == 4'd7) ? 4'd0 : bitCount + 4'd1 ;
  assign bitCount$EN = EN_recieve ;

  // register shiftReg
  assign shiftReg$D_IN = { recieve_rx, shiftReg[7:1] } ;
  assign shiftReg$EN = EN_recieve ;

  // submodule dataFifo
  assign dataFifo$D_IN = { recieve_rx, shiftReg[7:1] } ;
  assign dataFifo$ENQ = EN_recieve && bitCount == 4'd7 ;
  assign dataFifo$DEQ = EN_get ;
  assign dataFifo$CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	shiftReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (bitCount$EN) bitCount <= `BSV_ASSIGNMENT_DELAY bitCount$D_IN;
	if (shiftReg$EN) shiftReg <= `BSV_ASSIGNMENT_DELAY shiftReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bitCount = 4'hA;
    shiftReg = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkuart_rx

