/*
 * Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
 * 
 * On Mon Apr 14 11:14:53 IST 2025
 * 
 */

/* Generation options: */
#ifndef __mkRegisterFile_h__
#define __mkRegisterFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkRegisterFile module */
class MOD_mkRegisterFile : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_x1;
  MOD_Reg<tUInt32> INST_x10;
  MOD_Reg<tUInt32> INST_x11;
  MOD_Reg<tUInt32> INST_x12;
  MOD_Reg<tUInt32> INST_x13;
  MOD_Reg<tUInt32> INST_x14;
  MOD_Reg<tUInt32> INST_x15;
  MOD_Reg<tUInt32> INST_x16;
  MOD_Reg<tUInt32> INST_x17;
  MOD_Reg<tUInt32> INST_x18;
  MOD_Reg<tUInt32> INST_x19;
  MOD_Reg<tUInt32> INST_x2;
  MOD_Reg<tUInt32> INST_x20;
  MOD_Reg<tUInt32> INST_x21;
  MOD_Reg<tUInt32> INST_x22;
  MOD_Reg<tUInt32> INST_x23;
  MOD_Reg<tUInt32> INST_x24;
  MOD_Reg<tUInt32> INST_x25;
  MOD_Reg<tUInt32> INST_x26;
  MOD_Reg<tUInt32> INST_x27;
  MOD_Reg<tUInt32> INST_x28;
  MOD_Reg<tUInt32> INST_x29;
  MOD_Reg<tUInt32> INST_x3;
  MOD_Reg<tUInt32> INST_x30;
  MOD_Reg<tUInt32> INST_x31;
  MOD_Reg<tUInt32> INST_x4;
  MOD_Reg<tUInt32> INST_x5;
  MOD_Reg<tUInt32> INST_x6;
  MOD_Reg<tUInt32> INST_x7;
  MOD_Reg<tUInt32> INST_x8;
  MOD_Reg<tUInt32> INST_x9;
 
 /* Constructor */
 public:
  MOD_mkRegisterFile(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_write;
  tUInt8 PORT_write_addr;
  tUInt32 PORT_write_data;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_write;
 
 /* Local definitions */
 private:
  tUInt32 DEF__read__h979;
  tUInt32 DEF__read__h948;
  tUInt32 DEF__read__h917;
  tUInt32 DEF__read__h886;
  tUInt32 DEF__read__h855;
  tUInt32 DEF__read__h824;
  tUInt32 DEF__read__h793;
  tUInt32 DEF__read__h762;
  tUInt32 DEF__read__h731;
  tUInt32 DEF__read__h700;
  tUInt32 DEF__read__h669;
  tUInt32 DEF__read__h638;
  tUInt32 DEF__read__h607;
  tUInt32 DEF__read__h576;
  tUInt32 DEF__read__h545;
  tUInt32 DEF__read__h514;
  tUInt32 DEF__read__h483;
  tUInt32 DEF__read__h452;
  tUInt32 DEF__read__h421;
  tUInt32 DEF__read__h390;
  tUInt32 DEF__read__h359;
  tUInt32 DEF__read__h328;
  tUInt32 DEF__read__h297;
  tUInt32 DEF__read__h266;
  tUInt32 DEF__read__h235;
  tUInt32 DEF__read__h204;
  tUInt32 DEF__read__h173;
  tUInt32 DEF__read__h142;
  tUInt32 DEF__read__h111;
  tUInt32 DEF__read__h80;
  tUInt32 DEF__read__h49;
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  tUInt32 METH_rs1(tUInt8 ARG_rs1_addr);
  tUInt8 METH_RDY_rs1();
  tUInt32 METH_rs2(tUInt8 ARG_rs2_addr);
  tUInt8 METH_RDY_rs2();
  void METH_write(tUInt8 ARG_write_addr, tUInt32 ARG_write_data);
  tUInt8 METH_RDY_write();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRegisterFile &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRegisterFile &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRegisterFile &backing);
};

#endif /* ifndef __mkRegisterFile_h__ */
