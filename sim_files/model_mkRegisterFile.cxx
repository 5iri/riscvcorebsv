/*
 * Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87)
 * 
 * On Mon Apr 14 11:14:53 IST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkRegisterFile.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkRegisterFile::MODEL_mkRegisterFile()
{
  mkRegisterFile_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkRegisterFile()
{
  MODEL_mkRegisterFile *model = new MODEL_mkRegisterFile();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkRegisterFile &INST_top = *((MOD_mkRegisterFile *)(instance_ptr));
	 INST_top.DEF_WILL_FIRE_write = INST_top.PORT_EN_write;
	 INST_top.METH_RDY_write();
	 if (INST_top.DEF_WILL_FIRE_write)
	   INST_top.METH_write(INST_top.PORT_write_addr, INST_top.PORT_write_data);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_x1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x8.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x9.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x10.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x11.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x12.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x13.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x14.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x15.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x16.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x17.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x18.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x19.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x20.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x21.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x22.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x23.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x24.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x25.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x26.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x27.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x28.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x29.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x30.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_x31.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkRegisterFile::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkRegisterFile_instance = new MOD_mkRegisterFile(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkRegisterFile_instance->set_clk_0)("CLK");
}
void MODEL_mkRegisterFile::destroy_model()
{
  delete mkRegisterFile_instance;
  mkRegisterFile_instance = NULL;
}
void MODEL_mkRegisterFile::reset_model(bool asserted)
{
  (mkRegisterFile_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkRegisterFile::get_instance()
{
  return mkRegisterFile_instance;
}

/* Fill in version numbers */
void MODEL_mkRegisterFile::get_version(char const **name, char const **build)
{
  *name = "2025.01.1";
  *build = "65e3a87";
}

/* Get the model creation time */
time_t MODEL_mkRegisterFile::get_creation_time()
{
  
  /* Mon Apr 14 05:44:53 UTC 2025 */
  return 1744609493llu;
}

/* State dumping function */
void MODEL_mkRegisterFile::dump_state()
{
  (mkRegisterFile_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkRegisterFile & mkRegisterFile_backing(tSimStateHdl simHdl)
{
  static MOD_mkRegisterFile *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkRegisterFile(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkRegisterFile::dump_VCD_defs()
{
  (mkRegisterFile_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkRegisterFile::dump_VCD(tVCDDumpType dt)
{
  (mkRegisterFile_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkRegisterFile_backing(sim_hdl));
}
